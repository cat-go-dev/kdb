// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// WALLayer is an autogenerated mock type for the WALLayer type
type WALLayer struct {
	mock.Mock
}

type WALLayer_Expecter struct {
	mock *mock.Mock
}

func (_m *WALLayer) EXPECT() *WALLayer_Expecter {
	return &WALLayer_Expecter{mock: &_m.Mock}
}

// Write provides a mock function with given fields: ctx, log
func (_m *WALLayer) Write(ctx context.Context, log string) {
	_m.Called(ctx, log)
}

// WALLayer_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type WALLayer_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - log string
func (_e *WALLayer_Expecter) Write(ctx interface{}, log interface{}) *WALLayer_Write_Call {
	return &WALLayer_Write_Call{Call: _e.mock.On("Write", ctx, log)}
}

func (_c *WALLayer_Write_Call) Run(run func(ctx context.Context, log string)) *WALLayer_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WALLayer_Write_Call) Return() *WALLayer_Write_Call {
	_c.Call.Return()
	return _c
}

func (_c *WALLayer_Write_Call) RunAndReturn(run func(context.Context, string)) *WALLayer_Write_Call {
	_c.Run(run)
	return _c
}

// NewWALLayer creates a new instance of WALLayer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWALLayer(t interface {
	mock.TestingT
	Cleanup(func())
}) *WALLayer {
	mock := &WALLayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
